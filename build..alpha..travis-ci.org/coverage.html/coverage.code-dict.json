{"/home/travis/build/npmtest/node-npmtest-karma-coverage/test.js":"/* istanbul instrument in package npmtest_karma_coverage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-coverage/lib.npmtest_karma_coverage.js":"/* istanbul instrument in package npmtest_karma_coverage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_karma_coverage = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_karma_coverage = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-coverage/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-karma-coverage && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_karma_coverage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_karma_coverage\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_karma_coverage.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_karma_coverage.rollup.js'] =\n            local.assetsDict['/assets.npmtest_karma_coverage.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_karma_coverage.__dirname +\n                    '/lib.npmtest_karma_coverage.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-coverage/karma-coverage/lib/index.js":"// karma-coverage\n// ==============\n//\n// Main entry point for the karma-coverage module.\n// Exposes the preprocessor and reporter plugins.\n\n// Registering one additional (karma specific) reporter: in-memory\nrequire('istanbul').Report.register(require('./in-memory-report'))\n\nmodule.exports = {\n  'preprocessor:coverage': ['factory', require('./preprocessor')],\n  'reporter:coverage': ['type', require('./reporter')]\n}\n","/home/travis/build/npmtest/node-npmtest-karma-coverage/karma-coverage/lib/in-memory-report.js":"var Report = require('istanbul').Report\nvar util = require('util')\n\nfunction InMemoryReport (opt) {\n  this.opt = opt\n}\n\nutil.inherits(InMemoryReport, Report)\n\nInMemoryReport.prototype.writeReport = function (collector, sync) {\n  if (!this.opt.emitter || !this.opt.emitter.emit) {\n    console.error('Could not raise \"coverage_complete\" event, missing emitter because it was not supplied during initialization of the reporter')\n  } else {\n    this.opt.emitter.emit('coverage_complete', this.opt.browser, collector.getFinalCoverage())\n  }\n}\n\nInMemoryReport.TYPE = 'in-memory'\n\nmodule.exports = InMemoryReport\n","/home/travis/build/npmtest/node-npmtest-karma-coverage/karma-coverage/lib/preprocessor.js":"// Coverage Preprocessor\n// =====================\n//\n// Depends on the the reporter to generate an actual report\n\n// Dependencies\n// ------------\n\nvar istanbul = require('istanbul')\nvar minimatch = require('minimatch')\nvar path = require('path')\nvar _ = require('lodash')\nvar SourceMapConsumer = require('source-map').SourceMapConsumer\nvar SourceMapGenerator = require('source-map').SourceMapGenerator\nvar globalSourceCache = require('./source-cache')\nvar extend = require('util')._extend\nvar coverageMap = require('./coverage-map')\n\n// Regexes\n// -------\n\nvar coverageObjRegex = /\\{.*\"path\".*\"fnMap\".*\"statementMap\".*\"branchMap\".*\\}/g\n\n// Preprocessor creator function\nfunction createCoveragePreprocessor (logger, helper, basePath, reporters, coverageReporter) {\n  var log = logger.create('preprocessor.coverage')\n\n  // Options\n  // -------\n\n  var instrumenterOverrides = {}\n  var instrumenters = {istanbul: istanbul}\n  var includeAllSources = false\n  var useJSExtensionForCoffeeScript = false\n\n  if (coverageReporter) {\n    instrumenterOverrides = coverageReporter.instrumenter\n    instrumenters = extend({istanbul: istanbul}, coverageReporter.instrumenters)\n    includeAllSources = coverageReporter.includeAllSources === true\n    useJSExtensionForCoffeeScript = coverageReporter.useJSExtensionForCoffeeScript === true\n  }\n\n  var sourceCache = globalSourceCache.get(basePath)\n\n  var instrumentersOptions = _.reduce(instrumenters, function getInstumenterOptions (memo, instrument, name) {\n    memo[name] = {}\n\n    if (coverageReporter && coverageReporter.instrumenterOptions) {\n      memo[name] = coverageReporter.instrumenterOptions[name]\n    }\n\n    return memo\n  }, {})\n\n  // if coverage reporter is not used, do not preprocess the files\n  if (!_.includes(reporters, 'coverage')) {\n    return function (content, _, done) {\n      done(content)\n    }\n  }\n\n  // check instrumenter override requests\n  function checkInstrumenters () {\n    return _.reduce(instrumenterOverrides, function (acc, literal, pattern) {\n      if (!_.includes(_.keys(instrumenters), String(literal))) {\n        log.error('Unknown instrumenter: %s', literal)\n        return false\n      }\n      return acc\n    }, true)\n  }\n\n  if (!checkInstrumenters()) {\n    return function (content, _, done) {\n      return done(1)\n    }\n  }\n\n  return function (content, file, done) {\n    log.debug('Processing \"%s\".', file.originalPath)\n\n    var jsPath = path.resolve(file.originalPath)\n    // default instrumenters\n    var instrumenterLiteral = 'istanbul'\n\n    _.forEach(instrumenterOverrides, function (literal, pattern) {\n      if (minimatch(file.originalPath, pattern, {dot: true})) {\n        instrumenterLiteral = String(literal)\n      }\n    })\n\n    var InstrumenterConstructor = instrumenters[instrumenterLiteral].Instrumenter\n    var constructOptions = instrumentersOptions[instrumenterLiteral] || {}\n    var codeGenerationOptions = null\n\n    if (file.sourceMap) {\n      log.debug('Enabling source map generation for \"%s\".', file.originalPath)\n      codeGenerationOptions = extend({\n        format: {\n          compact: !constructOptions.noCompact\n        },\n        sourceMap: file.sourceMap.file,\n        sourceMapWithCode: true,\n        file: file.path\n      }, constructOptions.codeGenerationOptions || {})\n    }\n\n    var options = extend({}, constructOptions)\n    options = extend(options, {codeGenerationOptions: codeGenerationOptions})\n\n    var instrumenter = new InstrumenterConstructor(options)\n    instrumenter.instrument(content, jsPath, function (err, instrumentedCode) {\n      if (err) {\n        log.error('%s\\n  at %s', err.message, file.originalPath)\n        done(err.message)\n      } else {\n        if (file.sourceMap && instrumenter.lastSourceMap()) {\n          log.debug('Adding source map to instrumented file for \"%s\".', file.originalPath)\n          var generator = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(instrumenter.lastSourceMap().toString()))\n          generator.applySourceMap(new SourceMapConsumer(file.sourceMap))\n          file.sourceMap = JSON.parse(generator.toString())\n          instrumentedCode += '\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,'\n          instrumentedCode += new Buffer(JSON.stringify(file.sourceMap)).toString('base64') + '\\n'\n        }\n\n        // remember the actual immediate instrumented JS for given original path\n        sourceCache[jsPath] = content\n\n        if (includeAllSources) {\n          // reset stateful regex\n          coverageObjRegex.lastIndex = 0\n\n          var coverageObjMatch = coverageObjRegex.exec(instrumentedCode)\n\n          if (coverageObjMatch !== null) {\n            var coverageObj = JSON.parse(coverageObjMatch[0])\n\n            coverageMap.add(coverageObj)\n          }\n        }\n\n        // RequireJS expects JavaScript files to end with `.js`\n        if (useJSExtensionForCoffeeScript && instrumenterLiteral === 'ibrik') {\n          file.path = file.path.replace(/\\.coffee$/, '.js')\n        }\n\n        done(instrumentedCode)\n      }\n    })\n  }\n}\n\ncreateCoveragePreprocessor.$inject = [\n  'logger',\n  'helper',\n  'config.basePath',\n  'config.reporters',\n  'config.coverageReporter'\n]\n\nmodule.exports = createCoveragePreprocessor\n","/home/travis/build/npmtest/node-npmtest-karma-coverage/karma-coverage/lib/source-cache.js":"// Source Cache\n// ============\n\nvar cache = {}\n\nfunction get (basePath) {\n  if (!cache[basePath]) {\n    cache[basePath] = {}\n  }\n\n  return cache[basePath]\n}\n\nmodule.exports = {\n  get: get\n}\n","/home/travis/build/npmtest/node-npmtest-karma-coverage/karma-coverage/lib/coverage-map.js":"// Coverage Map\n// ============\n\nvar coverageMap = {}\n\nfunction add (coverageObj) {\n  coverageMap[coverageObj.path] = coverageObj\n}\n\nfunction get () {\n  return coverageMap\n}\n\nfunction reset () {\n  coverageMap = {}\n}\n\nmodule.exports = {\n  add: add,\n  get: get,\n  reset: reset\n}\n","/home/travis/build/npmtest/node-npmtest-karma-coverage/karma-coverage/lib/reporter.js":"// Coverage Reporter\n// Part of this code is based on [1], which is licensed under the New BSD License.\n// For more information see the See the accompanying LICENSE-istanbul file for terms.\n//\n// [1]: https://github.com/gotwarlost/istanbul/blob/master/lib/command/check-coverage.js\n// =====================\n//\n// Generates the report\n\n// Dependencies\n// ------------\n\nvar path = require('path')\nvar istanbul = require('istanbul')\nvar minimatch = require('minimatch')\nvar _ = require('lodash')\n\nvar globalSourceCache = require('./source-cache')\nvar coverageMap = require('./coverage-map')\nvar SourceCacheStore = require('./source-cache-store')\n\nfunction isAbsolute (file) {\n  if (path.isAbsolute) {\n    return path.isAbsolute(file)\n  }\n\n  return path.resolve(file) === path.normalize(file)\n}\n\n// TODO(vojta): inject only what required (config.basePath, config.coverageReporter)\nvar CoverageReporter = function (rootConfig, helper, logger, emitter) {\n  var log = logger.create('coverage')\n\n  // Instance variables\n  // ------------------\n\n  this.adapters = []\n\n  // Options\n  // -------\n\n  var config = rootConfig.coverageReporter || {}\n  var basePath = rootConfig.basePath\n  var reporters = config.reporters\n  var sourceCache = globalSourceCache.get(basePath)\n  var includeAllSources = config.includeAllSources === true\n\n  if (config.watermarks) {\n    config.watermarks = helper.merge({}, istanbul.config.defaultConfig().reporting.watermarks, config.watermarks)\n  }\n\n  if (!helper.isDefined(reporters)) {\n    reporters = [config]\n  }\n\n  var collectors\n  var pendingFileWritings = 0\n  var fileWritingFinished = function () {}\n\n  function writeReport (reporter, collector) {\n    try {\n      if (typeof config._onWriteReport === 'function') {\n        var newCollector = config._onWriteReport(collector)\n        if (typeof newCollector === 'object') {\n          collector = newCollector\n        }\n      }\n      reporter.writeReport(collector, true)\n    } catch (e) {\n      log.error(e)\n    }\n\n    --pendingFileWritings\n  }\n\n  function disposeCollectors () {\n    if (pendingFileWritings <= 0) {\n      _.forEach(collectors, function (collector) {\n        collector.dispose()\n      })\n\n      fileWritingFinished()\n    }\n  }\n\n  function normalize (key) {\n    // Exclude keys will always be relative, but covObj keys can be absolute or relative\n    var excludeKey = isAbsolute(key) ? path.relative(basePath, key) : key\n    // Also normalize for files that start with `./`, etc.\n    excludeKey = path.normalize(excludeKey)\n\n    return excludeKey\n  }\n\n  function removeFiles (covObj, patterns) {\n    var obj = {}\n\n    Object.keys(covObj).forEach(function (key) {\n      // Do any patterns match the resolved key\n      var found = patterns.some(function (pattern) {\n        return minimatch(normalize(key), pattern, {dot: true})\n      })\n\n      // if no patterns match, keep the key\n      if (!found) {\n        obj[key] = covObj[key]\n      }\n    })\n\n    return obj\n  }\n\n  function overrideThresholds (key, overrides) {\n    var thresholds = {}\n\n    // First match wins\n    Object.keys(overrides).some(function (pattern) {\n      if (minimatch(normalize(key), pattern, {dot: true})) {\n        thresholds = overrides[pattern]\n        return true\n      }\n    })\n\n    return thresholds\n  }\n\n  function checkCoverage (browser, collector) {\n    var defaultThresholds = {\n      global: {\n        statements: 0,\n        branches: 0,\n        lines: 0,\n        functions: 0,\n        excludes: []\n      },\n      each: {\n        statements: 0,\n        branches: 0,\n        lines: 0,\n        functions: 0,\n        excludes: [],\n        overrides: {}\n      }\n    }\n\n    var thresholds = helper.merge({}, defaultThresholds, config.check)\n\n    var rawCoverage = collector.getFinalCoverage()\n    var globalResults = istanbul.utils.summarizeCoverage(removeFiles(rawCoverage, thresholds.global.excludes))\n    var eachResults = removeFiles(rawCoverage, thresholds.each.excludes)\n\n    // Summarize per-file results and mutate original results.\n    Object.keys(eachResults).forEach(function (key) {\n      eachResults[key] = istanbul.utils.summarizeFileCoverage(eachResults[key])\n    })\n\n    var coverageFailed = false\n\n    function check (name, thresholds, actuals) {\n      var keys = [\n        'statements',\n        'branches',\n        'lines',\n        'functions'\n      ]\n\n      keys.forEach(function (key) {\n        var actual = actuals[key].pct\n        var actualUncovered = actuals[key].total - actuals[key].covered\n        var threshold = thresholds[key]\n\n        if (threshold < 0) {\n          if (threshold * -1 < actualUncovered) {\n            coverageFailed = true\n            log.error(browser.name + ': Uncovered count for ' + key + ' (' + actualUncovered +\n              ') exceeds ' + name + ' threshold (' + -1 * threshold + ')')\n          }\n        } else {\n          if (actual < threshold) {\n            coverageFailed = true\n            log.error(browser.name + ': Coverage for ' + key + ' (' + actual +\n              '%) does not meet ' + name + ' threshold (' + threshold + '%)')\n          }\n        }\n      })\n    }\n\n    check('global', thresholds.global, globalResults)\n\n    Object.keys(eachResults).forEach(function (key) {\n      var keyThreshold = helper.merge(thresholds.each, overrideThresholds(key, thresholds.each.overrides))\n      check('per-file' + ' (' + key + ') ', keyThreshold, eachResults[key])\n    })\n\n    return coverageFailed\n  }\n\n  // Generate the output directory from the `coverageReporter.dir` and\n  // `coverageReporter.subdir` options.\n  function generateOutputDir (browserName, dir, subdir) {\n    dir = dir || 'coverage'\n    subdir = subdir || browserName\n\n    if (_.isFunction(subdir)) {\n      subdir = subdir(browserName)\n    }\n\n    return path.join(dir, subdir)\n  }\n\n  this.onRunStart = function (browsers) {\n    collectors = Object.create(null)\n\n    // TODO(vojta): remove once we don't care about Karma 0.10\n    if (browsers) {\n      browsers.forEach(this.onBrowserStart.bind(this))\n    }\n  }\n\n  this.onBrowserStart = function (browser) {\n    collectors[browser.id] = new istanbul.Collector()\n\n    if (!includeAllSources) return\n\n    collectors[browser.id].add(coverageMap.get())\n  }\n\n  this.onBrowserComplete = function (browser, result) {\n    var collector = collectors[browser.id]\n\n    if (!collector) return\n    if (!result || !result.coverage) return\n\n    collector.add(result.coverage)\n  }\n\n  this.onSpecComplete = function (browser, result) {\n    if (!result.coverage) return\n\n    collectors[browser.id].add(result.coverage)\n  }\n\n  this.onRunComplete = function (browsers, results) {\n    var checkedCoverage = {}\n\n    reporters.forEach(function (reporterConfig) {\n      browsers.forEach(function (browser) {\n        var collector = collectors[browser.id]\n\n        if (!collector) {\n          return\n        }\n\n        // If config.check is defined, check coverage levels for each browser\n        if (config.hasOwnProperty('check') && !checkedCoverage[browser.id]) {\n          checkedCoverage[browser.id] = true\n          var coverageFailed = checkCoverage(browser, collector)\n          if (coverageFailed) {\n            if (results) {\n              results.exitCode = 1\n            }\n          }\n        }\n\n        pendingFileWritings++\n\n        var mainDir = reporterConfig.dir || config.dir\n        var subDir = reporterConfig.subdir || config.subdir\n        var simpleOutputDir = generateOutputDir(browser.name, mainDir, subDir)\n        var resolvedOutputDir = path.resolve(basePath, simpleOutputDir)\n\n        var outputDir = helper.normalizeWinPath(resolvedOutputDir)\n        var sourceStore = _.isEmpty(sourceCache) ? null : new SourceCacheStore({\n          sourceCache: sourceCache\n        })\n        var options = helper.merge({\n          sourceStore: sourceStore\n        }, config, reporterConfig, {\n          dir: outputDir,\n          browser: browser,\n          emitter: emitter\n        })\n        var reporter = istanbul.Report.create(reporterConfig.type || 'html', options)\n\n         // If reporting to console or in-memory skip directory creation\n        var toDisk = !reporterConfig.type || !reporterConfig.type.match(/^(text|text-summary|in-memory)$/)\n        var hasNoFile = _.isUndefined(reporterConfig.file)\n\n        if (!toDisk && hasNoFile) {\n          writeReport(reporter, collector)\n          return\n        }\n\n        helper.mkdirIfNotExists(outputDir, function () {\n          log.debug('Writing coverage to %s', outputDir)\n          writeReport(reporter, collector)\n          disposeCollectors()\n        })\n      })\n    })\n\n    disposeCollectors()\n  }\n\n  this.onExit = function (done) {\n    if (pendingFileWritings) {\n      fileWritingFinished = (\n        typeof config._onExit === 'function'\n        ? (function (done) { return function () { config._onExit(done) } }(done))\n        : done\n      )\n    } else {\n      (typeof config._onExit === 'function' ? config._onExit(done) : done())\n    }\n  }\n}\n\nCoverageReporter.$inject = ['config', 'helper', 'logger', 'emitter']\n\n// PUBLISH\nmodule.exports = CoverageReporter\n","/home/travis/build/npmtest/node-npmtest-karma-coverage/karma-coverage/lib/source-cache-store.js":"// Source Cache Store\n// ==================\n//\n// Used by lib/reporter\n\n// Dependencies\n// ------------\n\nvar util = require('util')\nvar Store = require('istanbul').Store\n\n// Constructor\nvar SourceCacheStore = module.exports = function (opts) {\n  Store.call(this, opts)\n  opts = opts || {}\n  this.sourceCache = opts.sourceCache\n}\n\n// Class Constants\n// ---------------\nSourceCacheStore.TYPE = 'sourceCacheLookup'\n\n// Inherits from an Istanbul.Store\nutil.inherits(SourceCacheStore, Store)\n\n// Implement needed methods\nStore.mix(SourceCacheStore, {\n  keys: function () {\n    throw new Error('Not implemented')\n  },\n  get: function (key) {\n    return this.sourceCache[key]\n  },\n  hasKey: function (key) {\n    return this.sourceCache.hasOwnProperty(key)\n  },\n  set: function (key, contents) {\n    throw new Error('Not applicable')\n  }\n})\n"}